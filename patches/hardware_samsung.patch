From 3c529aa74f884a7ebac2eced80ba9335bb7c6a40 Mon Sep 17 00:00:00 2001
From: Technohacker <technohacker1995@gmail.com>
Date: Fri, 4 Aug 2017 08:44:09 +0530
Subject: [PATCH] galaxysl: RIL fixes

1) Android.mk Add our modem name to build libril
2) RIL sends isVideo field
3) Remove callback version check
4) Use a specific exynos4 enhancement
5) Use loopback socket instead of Unix socket

Change-Id: I0718033850e4c2508454e43fdd7207c59d91ed09
---
 ril/Android.mk                         |  3 +--
 ril/libril/ril.cpp                     | 10 ----------
 ril/libril/ril_commands.h              |  8 ++++----
 ril/libsecril-client/secril-client.cpp |  5 ++---
 4 files changed, 7 insertions(+), 19 deletions(-)

diff --git a/ril/Android.mk b/ril/Android.mk
index 0b76b81..8d0d8f3 100644
--- a/ril/Android.mk
+++ b/ril/Android.mk
@@ -20,7 +20,7 @@ ifeq ($(BOARD_VENDOR),samsung)
 
 # libril
 ifeq ($(BOARD_PROVIDES_LIBRIL),true)
-ifneq ($(filter m7450 mdm9x35 ss333 tss310 xmm6260 xmm6262 xmm6360 xmm7260,$(BOARD_MODEM_TYPE)),)
+ifneq ($(filter m7450 mdm9x35 ss333 tss310 xmm6160 xmm6260 xmm6262 xmm6360 xmm7260,$(BOARD_MODEM_TYPE)),)
 include $(RIL_PATH)/libril/Android.mk
 endif
 endif
@@ -30,4 +30,3 @@ SECRIL_CLIENT_DIRS := libsecril-client libsecril-client-sap
 include $(foreach client_dirs,$(SECRIL_CLIENT_DIRS),$(RIL_PATH)/$(client_dirs)/Android.mk)
 
 endif
-
diff --git a/ril/libril/ril.cpp b/ril/libril/ril.cpp
index 4478ea2..9c6b217 100755
--- a/ril/libril/ril.cpp
+++ b/ril/libril/ril.cpp
@@ -2555,18 +2555,13 @@ static int responseCallList(Parcel &p, void *response, size_t responselen) {
         p.writeInt32(p_cur->isMT);
         p.writeInt32(p_cur->als);
         p.writeInt32(p_cur->isVoice);
-
-#ifdef NEEDS_VIDEO_CALL_FIELD
         p.writeInt32(p_cur->isVideo);
-#endif
-
 #ifdef SAMSUNG_NEXT_GEN_MODEM
         /* Pass CallDetails */
         p.writeInt32(0);
         p.writeInt32(0);
         writeStringToParcel(p, "");
 #endif
-
         p.writeInt32(p_cur->isVoicePrivacy);
         writeStringToParcel(p, p_cur->number);
         p.writeInt32(p_cur->numberPresentation);
@@ -5066,11 +5061,6 @@ RIL_register (const RIL_RadioFunctions *callbacks) {
         RLOGE("RIL_register: RIL_RadioFunctions * null");
         return;
     }
-    if (callbacks->version < RIL_VERSION_MIN) {
-        RLOGE("RIL_register: version %d is to old, min version is %d",
-             callbacks->version, RIL_VERSION_MIN);
-        return;
-    }
 
     RLOGE("RIL_register: RIL version %d", callbacks->version);
 
diff --git a/ril/libril/ril_commands.h b/ril/libril/ril_commands.h
index bdb179a..cfd137e 100644
--- a/ril/libril/ril_commands.h
+++ b/ril/libril/ril_commands.h
@@ -32,15 +32,15 @@
     {RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE, dispatchVoid, responseVoid},
     {RIL_REQUEST_CONFERENCE, dispatchVoid, responseVoid},
     {RIL_REQUEST_UDUB, dispatchVoid, responseVoid},
-#ifndef EXYNOS4_ENHANCEMENTS
-    {RIL_REQUEST_LAST_CALL_FAIL_CAUSE, dispatchVoid, responseFailCause},
-#else
+//#ifndef EXYNOS4_ENHANCEMENTS
+//    {RIL_REQUEST_LAST_CALL_FAIL_CAUSE, dispatchVoid, responseFailCause},
+//#else
     /*
      * Exynos4 devices send an extra int for LAST_CALL_FAIL_CAUSE
      * which causes responseFailCause to think it's a string and crash.
      */
     {RIL_REQUEST_LAST_CALL_FAIL_CAUSE, dispatchVoid, responseInts},
-#endif
+//#endif
     {RIL_REQUEST_SIGNAL_STRENGTH, dispatchVoid, responseRilSignalStrength},
     {RIL_REQUEST_VOICE_REGISTRATION_STATE, dispatchVoid, responseStrings},
     {RIL_REQUEST_DATA_REGISTRATION_STATE, dispatchVoid, responseStrings},
diff --git a/ril/libsecril-client/secril-client.cpp b/ril/libsecril-client/secril-client.cpp
index e607f00..c6160c6 100755
--- a/ril/libsecril-client/secril-client.cpp
+++ b/ril/libsecril-client/secril-client.cpp
@@ -359,8 +359,8 @@ int Connect_RILD(HRilClient client) {
     client_prv = (RilClientPrv *)(client->prv);
 
     // Open client socket and connect to server.
-    //client_prv->sock = socket_loopback_client(RILD_PORT, SOCK_STREAM);
-    client_prv->sock = socket_local_client(MULTI_CLIENT_SOCKET_NAME, ANDROID_SOCKET_NAMESPACE_ABSTRACT, SOCK_STREAM );
+    client_prv->sock = socket_loopback_client(RILD_PORT, SOCK_STREAM);
+    //client_prv->sock = socket_local_client(MULTI_CLIENT_SOCKET_NAME, ANDROID_SOCKET_NAMESPACE_ABSTRACT, SOCK_STREAM );
 
     if (client_prv->sock < 0) {
         RLOGE("%s: Connecting failed. %s(%d)", __FUNCTION__, strerror(errno), errno);
@@ -1615,4 +1615,3 @@ static int blockingWrite(int fd, const void *buffer, size_t len) {
 } // namespace android
 
 // end of file
-
-- 
2.13.4
From b61a4090d93013fea02f5d03b862ea3c4b805494 Mon Sep 17 00:00:00 2001
From: Technohacker <technohacker1995@gmail.com>
Date: Fri, 25 Aug 2017 18:19:04 +0530
Subject: [PATCH] ril: More fixes

1) Add correct modem type for the Galaxy SL (XMM6160)
2) responseInts on HSDPA_STATE_CHANGED
3) Prevent wakelocks on certain requests

Change-Id: I941eac4c9dabdc9e9987883e4b4115c4bd73438d
---
 .../include/telephony/ril_unsol_commands_vendor.h  |  2 +-
 ril/libril/ril.cpp                                 | 31 ++++++++++++++++++++++
 ril/libril/ril_commands.h                          |  4 +--
 3 files changed, 34 insertions(+), 3 deletions(-)

diff --git a/ril/libril/include/telephony/ril_unsol_commands_vendor.h b/ril/libril/include/telephony/ril_unsol_commands_vendor.h
index 0a9b657..1f7e008 100644
--- a/ril/libril/include/telephony/ril_unsol_commands_vendor.h
+++ b/ril/libril/include/telephony/ril_unsol_commands_vendor.h
@@ -30,7 +30,7 @@
     {RIL_UNSOL_SAP, responseVoid, WAKE_PARTIAL}, // 11013
     {11014, NULL, WAKE_PARTIAL},
     {RIL_UNSOL_SIM_SMS_STORAGE_AVAILALE, responseVoid, WAKE_PARTIAL}, // 11015
-    {RIL_UNSOL_HSDPA_STATE_CHANGED, responseVoid, WAKE_PARTIAL}, // 11016
+    {RIL_UNSOL_HSDPA_STATE_CHANGED, responseInts, WAKE_PARTIAL}, // 11016
     {RIL_UNSOL_WB_AMR_STATE, responseInts, WAKE_PARTIAL}, // 11017
     {RIL_UNSOL_TWO_MIC_STATE, responseInts, WAKE_PARTIAL}, // 11018
     {RIL_UNSOL_DHA_STATE, responseVoid, WAKE_PARTIAL}, // 11019
diff --git a/ril/libril/ril.cpp b/ril/libril/ril.cpp
index 9c6b217..ce96e35 100755
--- a/ril/libril/ril.cpp
+++ b/ril/libril/ril.cpp
@@ -267,6 +267,7 @@ static void dispatchCallForward(Parcel& p, RequestInfo *pRI);
 static void dispatchRaw(Parcel& p, RequestInfo *pRI);
 static void dispatchSmsWrite (Parcel &p, RequestInfo *pRI);
 static void dispatchDataCall (Parcel& p, RequestInfo *pRI);
+static void dispatchAllowData (Parcel& p, RequestInfo *pRI);
 static void dispatchVoiceRadioTech (Parcel& p, RequestInfo *pRI);
 static void dispatchSetInitialAttachApn (Parcel& p, RequestInfo *pRI);
 static void dispatchCdmaSubscriptionSource (Parcel& p, RequestInfo *pRI);
@@ -275,6 +276,7 @@ static void dispatchCdmaSms(Parcel &p, RequestInfo *pRI);
 static void dispatchImsSms(Parcel &p, RequestInfo *pRI);
 static void dispatchImsCdmaSms(Parcel &p, RequestInfo *pRI, uint8_t retry, int32_t messageRef);
 static void dispatchImsGsmSms(Parcel &p, RequestInfo *pRI, uint8_t retry, int32_t messageRef);
+static void dispatchImsRegistrationState(Parcel &p, RequestInfo *pRI);
 static void dispatchCdmaSmsAck(Parcel &p, RequestInfo *pRI);
 static void dispatchGsmBrSmsCnf(Parcel &p, RequestInfo *pRI);
 static void dispatchCdmaBrSmsCnf(Parcel &p, RequestInfo *pRI);
@@ -1446,6 +1448,14 @@ invalid:
     return;
 }
 
+static void dispatchImsRegistrationState(Parcel &p, RequestInfo *pRI) {
+    if (s_callbacks.version < 4) {
+        RIL_onRequestComplete(pRI, RIL_E_REQUEST_NOT_SUPPORTED, NULL, 0);
+        return;
+    }
+    dispatchVoid(p, pRI);
+}
+
 static void
 dispatchImsSms(Parcel &p, RequestInfo *pRI) {
     int32_t  t;
@@ -1592,6 +1602,12 @@ invalid:
 
 static void
 dispatchCdmaBrSmsCnf(Parcel &p, RequestInfo *pRI) {
+
+    if (s_callbacks.version < 4) {
+        RIL_onRequestComplete(pRI, RIL_E_REQUEST_NOT_SUPPORTED, NULL, 0);
+        return;
+    }
+
     int32_t t;
     status_t status;
     int32_t num;
@@ -1765,6 +1781,8 @@ static void dispatchDataCall(Parcel& p, RequestInfo *pRI) {
       Parcel p2;
       p2.appendFrom(&p, 0, pos);
       p2.writeInt32(numParamsRilV3);
+      /* The RIL requires the type to be RADIO_TECH_GPRS (1), as v3 specs state 0 (CDMA) or 1 (GSM) */
+      writeStringToParcel(p2, "1");
       for(int i = 0; i < numParamsRilV3; i++) {
         p2.writeString16(p.readString16());
       }
@@ -1830,8 +1848,21 @@ static void dispatchCdmaSubscriptionSource(Parcel& p, RequestInfo *pRI) {
         RIL_onRequestComplete(pRI, RIL_E_SUCCESS, &cdmaSubscriptionSource, sizeof(int));
 }
 
+static void dispatchAllowData(Parcel &p, RequestInfo *pRI)
+{
+    if (s_callbacks.version < 4) {
+        RIL_onRequestComplete(pRI, RIL_E_REQUEST_NOT_SUPPORTED, NULL, 0);
+        return;
+    }
+    dispatchInts(p, pRI);
+}
+
 static void dispatchSetInitialAttachApn(Parcel &p, RequestInfo *pRI)
 {
+    if (s_callbacks.version < 4) {
+        RIL_onRequestComplete(pRI, RIL_E_REQUEST_NOT_SUPPORTED, NULL, 0);
+        return;
+    }
     RIL_InitialAttachApn pf;
     int32_t  t;
     status_t status;
diff --git a/ril/libril/ril_commands.h b/ril/libril/ril_commands.h
index cfd137e..f6a5a5c 100644
--- a/ril/libril/ril_commands.h
+++ b/ril/libril/ril_commands.h
@@ -134,7 +134,7 @@
     {RIL_REQUEST_GET_CELL_INFO_LIST, dispatchVoid, responseCellInfoList},
     {RIL_REQUEST_SET_UNSOL_CELL_INFO_LIST_RATE, dispatchInts, responseVoid},
     {RIL_REQUEST_SET_INITIAL_ATTACH_APN, dispatchSetInitialAttachApn, responseVoid},
-    {RIL_REQUEST_IMS_REGISTRATION_STATE, dispatchVoid, responseInts},
+    {RIL_REQUEST_IMS_REGISTRATION_STATE, dispatchImsRegistrationState, responseInts},
     {RIL_REQUEST_IMS_SEND_SMS, dispatchImsSms, responseSMS},
     {RIL_REQUEST_SIM_TRANSMIT_APDU_BASIC, dispatchSIM_APDU, responseSIM_IO},
     {RIL_REQUEST_SIM_OPEN_CHANNEL, dispatchString, responseInts},
@@ -145,7 +145,7 @@
     {RIL_REQUEST_NV_WRITE_CDMA_PRL, dispatchRaw, responseVoid},
     {RIL_REQUEST_NV_RESET_CONFIG, dispatchInts, responseVoid},
     {RIL_REQUEST_SET_UICC_SUBSCRIPTION, dispatchUiccSubscripton, responseVoid},
-    {RIL_REQUEST_ALLOW_DATA, dispatchInts, responseVoid},
+    {RIL_REQUEST_ALLOW_DATA, dispatchAllowData, responseVoid},
     {RIL_REQUEST_GET_HARDWARE_CONFIG, dispatchVoid, responseHardwareConfig},
     {RIL_REQUEST_SIM_AUTHENTICATION, dispatchSimAuthentication, responseSIM_IO},
     {RIL_REQUEST_GET_DC_RT_INFO, dispatchVoid, responseDcRtInfo},
-- 
2.14.1

